from numpy import *
from matplotlib import *
import numpy
from scipy.special import sph_harm
from scipy.interpolate import SmoothBivariateSpline
import pickle

execfile('./pars_velocity.py')

rr       = pickle.load(open(            'rr.dic','rb'))*1e-5 #Convert to km
theta    = pickle.load(open(         'theta.dic','rb'))

rr       = np.round(rr,9) #Round to 9 decimal places, so we can accurately count how many unique values there are
theta    = np.round(theta,9)

t        = pickle.load(open(       't_filtered.dic','rb')) #[rotrates_to_filter], chosen in parameter file

masks    = pickle.load(open('velocity_spectrogram_masks_tightenfactor'+str(tighten_factor)+'.dic','rb')) #Just to get keys from

dt = 0.1*1e-3 #time resolution for velocity field

r  = rotrate_to_decompose

if test=='yes':
	ti = 0 #time index to analyze
	modes = ['test']
else:
	modes = masks[r].keys() #Get mode keys
	modes.append('unfiltered')


#modes  = ['750'] #masks[r].keys() #Get mode keys
#points = range(len(rr)) #Get point keys
ru = np.unique(rr)
tu = np.unique(theta)
ra = range(len(ru))
ta = range(len(tu))


### Define vector spherical harmonic derivative w/ resp to theta

def dsph_harm(l,theta): #(d/dtheta) Y_lm... We use phi=m=0 since we're in axisymmetry and it doesn't matter
	m=0
	return sqrt( (l-m)*(l+m+1) ) * sph_harm(m+1,l,0.,theta)


### Read in all radii for this particular rotation rate

vr  = {}
vth = {}
vph = {}

for pr in ra:
	if test=='yes':
		vr[pr]  = {}
		vth[pr] = {}
		vph[pr] = {}

		for pt in ta: #Make same dictionary structure as actual data
			vr[pr][pt]  = {}
			vth[pr][pt] = {}
			vph[pr][pt] = {}

			vr[pr][pt]['test']  = {}
			vth[pr][pt]['test'] = {}
			vph[pr][pt]['test'] = {}

		rad   = ru[pr]

		l_r   = 2 #poloidal numbers to excite
		l_th  = 3
		l_ph  = 4
		xi_r  = np.sin(2*pi*rad/30.) #this is a trial radial mode function
		xi_th = np.cos(2*pi*rad/20.) #this is a trial polodial mode function
		xi_ph = np.cos(2*pi*rad/40.) #this is a trial azimuthal mode function

		for pt in ta:

			vr[pr]

			thta = tu[pt]
			vr[pr][pt]['test'][0]  = xi_r *real(sph_harm(0,l_r, 0.,thta))
			vth[pr][pt]['test'][0] = xi_th*real(dsph_harm( l_th,   thta))
			vph[pr][pt]['test'][0] = xi_ph*real(dsph_harm( l_ph,   thta))
	else:

		vr[pr]  = pickle.load(open( 'velr_filtered_rot'+r+'_r'+str(pr)+'.dic','rb'))
		vth[pr] = pickle.load(open('velth_filtered_rot'+r+'_r'+str(pr)+'.dic','rb'))
		if r!='0.0':
			vph[pr] = pickle.load(open(  'velph_filtered_rot'+r+'_r'+str(pr)+'.dic','rb'))


### Perform decomposition

Er  = {} #Dictionaries to hold the radial coefficients
Eth = {}
Eph = {}

for m in modes:

	Er[m]  = {}
	Eth[m] = {}
	Eph[m] = {}

	for l in poloidal_numbers:

		Er[m][l]  = []
		Eth[m][l] = []
		Eph[m][l] = []

		for pr in ra:
			rad=ru[pr]
			#Integrate over solid angles assuming axisymmetry

			vrintme = np.zeros(len(tu)) #Collect values along constant radius into an array
			for pt in ta:
				vrintme[pt] = vr[pr][pt][m][ti]

			Er[m][l].append(  2*pi * np.trapz(  vrintme *  real(sph_harm(0,l,0.,tu)) * np.sin(tu), dx=tu[1]-tu[0] ) )

			if l==0: #If l==0 need to do special case, otherwise dividing by 0
				Eth[m][l].append(0.)
				Eph[m][l].append(0.)
			else:

				vthintme = np.zeros(len(tu)) #Collect values along constant radius into an array
				for pt in ta:
					vthintme[pt] = vth[pr][pt][m][ti]

				Eth[m][l].append( ( 1./(l*(l+1.)) ) * 2*pi * np.trapz( vthintme * real(dsph_harm(  l,   tu)) * np.sin(tu), dx=tu[1]-tu[0] ) )
				if r!='0.0':
					vphintme = np.zeros(len(tu)) #Collect values along constant radius into a list
					for pt in ta:
						vphintme[pt] = vph[pr][pt][m][ti]

					Eph[m][l].append( ( 1./(l*(l+1.)) ) * 2*pi * np.trapz( vphintme * real(dsph_harm(  l,   tu)) * np.sin(tu), dx=tu[1]-tu[0] ) )

		#Turn into numpy arrays
		Er[m][l]  = np.array( Er[m][l])
		Eth[m][l] = np.array(Eth[m][l])
		if r!='0.0':
			Eph[m][l] = np.array(Eph[m][l])
'''
pickle.dump(Er, open( 'vr_sph_harm_coeffs_rot'+r+'.dic','wb'))
pickle.dump(Eth,open('vth_sph_harm_coeffs_rot'+r+'.dic','wb'))
if r!='0.0':
	pickle.dump(Eph,open('vph_sph_harm_coeffs_rot'+r+'.dic','wb'))
'''
